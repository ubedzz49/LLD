#include <bits/stdc++.h>
using namespace std;

class Element {
public:
    virtual void render() = 0;
    virtual ~Element() {}
};

class TextElement : public Element {
    string text;
public:
    TextElement(const string& t) : text(t) {}
    void render() override {
        cout << "Rendering Text: " << text << "\n";
    }
};

class ImageElement : public Element {
    string link;
public:
    ImageElement(const string& l) : link(l) {}
    void render() override {
        cout << "Rendering Image from: " << link << "\n";
    }
};

class RenderDocument {
public:
    vector<Element*> elements;
    void renderAll() {
        for (auto e : elements) {
            e->render();
        }
    }
    const vector<Element*>& getElements() const {
        return elements;
    }
};

class DB {
public:
    virtual void save(const RenderDocument* doc) = 0;
    virtual ~DB() {}
};

class MongoDB : public DB {
public:
    void save(const RenderDocument* doc) override {
        cout << "Saving to MongoDB...\n";
    }
};

class FileDB : public DB {
public:
    void save(const RenderDocument* doc) override {
        cout << "Saving to FileDB...\n";
    }
};

class AddElement {
    RenderDocument* doc;
public:
    AddElement(RenderDocument* d) : doc(d) {}
    void add(Element* elem) {
        doc->elements.push_back(elem);
    }
};

class SaveToDB {
    RenderDocument* doc;
    DB* db;
public:
    SaveToDB(RenderDocument* d, DB* b) : doc(d), db(b) {}
    void save() {
        db->save(doc);
    }
};

int main() {
    RenderDocument* doc = new RenderDocument();
    AddElement adder(doc);
    adder.add(new TextElement("Hello World"));
    adder.add(new ImageElement("image.png"));

    doc->renderAll();

    SaveToDB mongoSaver(doc, new MongoDB());
    mongoSaver.save();

    SaveToDB fileSaver(doc, new FileDB());
    fileSaver.save();

    delete doc;
    return 0;
}
